Maneras de trabajar con Git
consola de Comando del sistema operativo
Git bash
comandos de git:

git version : verificar version de git instalada y que efectivamente esta instalada

instalar git bash: emulador consola de comandos de linux

click derecho: menu contextual

para moverse entre carpetas por el cmd es: 

dir (se despliegan las carpetas del disco duro C)
cd (nombre de la carpeta en cuestion)

flecha arriba y abajo para atajos de comandos



GIT Bash

cd .. (ir hacia atras)
dir



                                         Repositorios Locales

para comenzar un proyecto se debe tener el uso del comando "git init", esto crea un repositorio

-No meterse con la carpeta ".git"

-Cada archivo del directorio puede estar en uno de estos dos estados

    -untracked: sin seguimiento (Git no sabe nada sobre dicho archivo)
    -tracked: bajo seguimiento (Git sabe todos los cambios hechos a dicho archivo)

comando: "git status" para conocer el estado de repositorio

ejemplo untracked:

On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        NotasGit1.txt

nothing added to commit but untracked files present (use "git add" to track)

----------------------------------------------------------------------------------------
En git existen "archivos ignorados"

estos archivos pueden tener:
un archivo especifico: "leame.txt"
se puede especificar un patron ".tmp"
un carpeta: "node_modules/"

para ignorar un archivo "mv (nombre del archivo) .gitignore"

escribir dentro del archivo .gitignore el nombre del archivo que se quiera ignorar, tambien se puede eliminar una linea
de archivos colocando *(nombre de la extension)

git add nombreArchivo --- esto indica a git que el archivo llamado nombreArchivo debe tener seguimiento. (track)

git add . --- indica a git que todos los archivos que se encuentren "untracked" pasen a ser "tracked"

git rm --cached archivo --- sacar archivo de repositorio (para sacar una carpeta ./nombredeCarpeta/nombredeArchivo)

llamar a un archivo ejecutable con git "../rutadelLink"


Confirmaciones:


Working Area: es donde se encuentran los archivos que están siendo editados.

Staging Area: es donde se encuentran archivos que ya han sido modificados y fueron agregados usando el comando git add,
por lo tanto, están preparados para la confirmación.

Local Repository: es donde se encuentran las versiones finales de los archivos que ya han sido confirmados.


Los estados que pueden tener los archivos son:

untracked: es el estado inicial de cualquier archivo o carpeta que está en la carpeta del repositorio o el estado que
toma un archivo cuando es removido del repositorio.

new and staged: el estado que toma el archivo cuando es agregado al repositorio la primera vez con el comando git add.

unmodified: el estado que toma el archivo cuando es confirmado utilizando el comando git commit.

modified: es el estado al que pasa un archivo que esta en el repositorio y ha sido modificado.
Los cambios del archivo estan en el "Working Área".

staged: el estado que toma el archivo cuando es agregado al "Staging area" con el comando git add.

antes de confirmar hay que identificarnos

git config --global user.name "Juan Chacon"@

git config --global user.email "chaconjuan439@gmail.com"

En el caso que simplemente se necesite mostrar la información que contienen esas variables,
se usa el mismo comando pero obviando el valor de la variable

git commit --- ejecuta la confirmacion

Al ejecutar el comando "git commit", se abre un editor de texto para que escriba la descripción de la confirmación.
El editor aparece con algunas líneas que muestran los archivos que estan siendo agregados en la versión.
Las líneas que comiencen con # serán ignoradas.

Para empezar a escribir en este editor, se debe presionar la tecla "i" (de insert).
Cuando se termine de escribir el mensaje, se debe presionar la tecla escape.
Luego se debe presionar las teclas ":wq".
Si no se desean guardar los cambios, sólo se debe presionar ":q" (se cierra el editor de texto y el commit se cancelará)

documentar todo lo que haga para un futuro

Si se guardan los cambios del mensaje, se cerrará el editor de texto y luego del commit,
Git mostrará un resumen informando los cambios en esta confirmación,
mostrando: el mensaje resumen del commit, cuantas inserciones, eliminaciones y modificaciones hubo.

Si se intenta hacer commit sin haber cambios agregados al "Stagin Area",
Git informará del error y no registrará la confirmación

si quiero escribir con espacio debo agregar comillas shift + num2



                               

                           Clase2 GIT




                       Confirmacion Resumida

git commit -m "se agrega el archvio algoritmo.txt" ---permite crear en la confirmacion y el mensaje lo deja corto

git commit -a -m "agregar nueva linea al algoritmo" ---prepara y confirma (hay que dejar mensaje)

git checkout -- "nombre del archivo" ---deshacer el cambio (no se pueden recuperar)

git reset HEAD "nombre del archivo"---deshacer el cambio que este en el Stating Area

modificar ultima modificacion

Git school + Github: abrir

https://git-school.github.io/visualizing-git/

git commit --amend -m "nombre del archvivo" ---la ultima confirmacion va ser sustituida por la nueva
                                               (se puede cambiar el mensaje), sirve para sustituir commit sin necesidad de crear otro

git restore --staged "nombre del archivo" deshacer cambios, mandar otra vez a Working Area

                        DIFERENCIAS

git diff -- que cambios hay con respecto a un archivo que ya este preparado o confirmado
git diff --staged ---muestra las diferencias que hay entre lo que esta confirmado pero que esta en el stage

                     Historial de Confirmaciones

Entre los datos que se muestran al ejecutar git log estan:
-el identificador unico de la confirmacion
-el autor de la confirmacion (nombre y correo)
-la fecha de la confirmacion
-el mensaje resumen de la confirmacion

                   Historial Grafico

Observar el arbol de confirmaciones, ver las diferencias etc etc

cambio para verlo en el diff

presionar letra Q para salir

gitk --- ver el historial grafico
git log -n 4 --- ver las ultimas 4 confirmaciones del repositorio
git log -4 --- ver solamente los ultimos 4 commit


                          MANIPULANDO ARCHIVOS

git mv "nombre del archivo" "nuevo nombre del archivo" ---cambiar nombre
git rm --- borrar definitivamente el archivo del repositorio
git mv "nombre del archivo" carpet/"nombre del archivo"

                         VIAJANDO EN EL TIEMPO

Cada confirmación tiene un identificador único.
Cada confirmación es parte de un árbol.
Todas las confirmaciones estan enlazadas entre sí, de forma tal que se puede navegar de una a otra.
Hay un elemento que permite apuntar la confirmación actual. A este elemento se le denomina "HEAD"

En algun momento se puede hacer que el HEAD se ubique en otra confirmación, de forma tal que se puede visualizar
el estado del repositorio en esa confirmación. Esto se logra con el comando “git checkout”.
La forma general de usarlo es la siguiente: git checkout Donde el parámetro "códigoCommit"
indica el código del commit al que se desea viajar. Para determinar a cuál confirmación se desea mover,
debe averiguar primero el código de la confirmación, utilizando el comando "git log".

git checkout master --- Cuando se desea regresar nuevamente a la última confirmación

                    RESET

Los viajes en el tiempo que se han hecho hasta ahora no han realizado cambios ni eliminado ninguna de las confirmaciones
anteriores. ¿Qué tal que lo que se desea es retroceder en el tiempo pero a su vez eliminar todas las confirmaciones
hasta el punto hasta el cual retrocede?. Esto con el objetivo de no dejar rastros de esas confirmaciones y que
no aparezcan en el historial.

Git provee un comando que permite hacer lo anteriormente descrito, es decir, retroceder a algún commit pero con
git reset "nombre de la confirmacion"--- eliminando los commit anteriores.
El comando reset puede ser usado en alguno de estos modos:

Soft: No toca el archivo de índice o el árbol de trabajo en absoluto (pero restablece el encabezado a ,
al igual que todos los modos). Esto deja todos los archivos modificados "Cambios que se comprometerán",
como lo indicaría el estado de git.

Mixed: Restablece el índice pero no el árbol de trabajo (es decir, los archivos modificados se conservan
pero no se marcan para la confirmación) e informa lo que no se ha actualizado. Esta es la acción por defecto.

Hard: Restablece el índice y el árbol de trabajo. Cualquier cambio en los archivos rastreados en el árbol de
trabajo desde se descarta

git reset "nombre de la confirmacion" --soft






























