Maneras de trabajar con Git
consola de Comando del sistema operativo
Git bash
comandos de git:

git version : verificar version de git instalada y que efectivamente esta instalada

instalar git bash: emulador consola de comandos de linux

click derecho: menu contextual

para moverse entre carpetas por el cmd es: 

dir (se despliegan las carpetas del disco duro C)
cd (nombre de la carpeta en cuestion)

flecha arriba y abajo para atajos de comandos



GIT Bash

cd .. (ir hacia atras)
dir



                                         Repositorios Locales

para comenzar un proyecto se debe tener el uso del comando "git init", esto crea un repositorio

-No meterse con la carpeta ".git"

-Cada archivo del directorio puede estar en uno de estos dos estados

    -untracked: sin seguimiento (Git no sabe nada sobre dicho archivo)
    -tracked: bajo seguimiento (Git sabe todos los cambios hechos a dicho archivo)

comando: "git status" para conocer el estado de repositorio

ejemplo untracked:

On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        NotasGit1.txt

nothing added to commit but untracked files present (use "git add" to track)

----------------------------------------------------------------------------------------
En git existen "archivos ignorados"

estos archivos pueden tener:
un archivo especifico: "leame.txt"
se puede especificar un patron ".tmp"
un carpeta: "node_modules/"

para ignorar un archivo "mv (nombre del archivo) .gitignore"

escribir dentro del archivo .gitignore el nombre del archivo que se quiera ignorar, tambien se puede eliminar una linea
de archivos colocando *(nombre de la extension)

git add nombreArchivo --- esto indica a git que el archivo llamado nombreArchivo debe tener seguimiento. (track)

git add . --- indica a git que todos los archivos que se encuentren "untracked" pasen a ser "tracked"

git rm --cached archivo --- sacar archivo de repositorio (para sacar una carpeta ./nombredeCarpeta/nombredeArchivo)

llamar a un archivo ejecutable con git "../rutadelLink"


Confirmaciones:


Working Area: es donde se encuentran los archivos que están siendo editados.

Staging Area: es donde se encuentran archivos que ya han sido modificados y fueron agregados usando el comando git add,
por lo tanto, están preparados para la confirmación.

Local Repository: es donde se encuentran las versiones finales de los archivos que ya han sido confirmados.


Los estados que pueden tener los archivos son:

untracked: es el estado inicial de cualquier archivo o carpeta que está en la carpeta del repositorio o el estado que
toma un archivo cuando es removido del repositorio.

new and staged: el estado que toma el archivo cuando es agregado al repositorio la primera vez con el comando git add.

unmodified: el estado que toma el archivo cuando es confirmado utilizando el comando git commit.

modified: es el estado al que pasa un archivo que esta en el repositorio y ha sido modificado.
Los cambios del archivo estan en el "Working Área".

staged: el estado que toma el archivo cuando es agregado al "Staging area" con el comando git add.

antes de confirmar hay que identificarnos

git config --global user.name "Juan Chacon"@

git config --global user.email "chaconjuan439@gmail.com"

En el caso que simplemente se necesite mostrar la información que contienen esas variables,
se usa el mismo comando pero obviando el valor de la variable

git commit --- ejecuta la confirmacion

Al ejecutar el comando "git commit", se abre un editor de texto para que escriba la descripción de la confirmación.
El editor aparece con algunas líneas que muestran los archivos que estan siendo agregados en la versión.
Las líneas que comiencen con # serán ignoradas.

Para empezar a escribir en este editor, se debe presionar la tecla "i" (de insert).
Cuando se termine de escribir el mensaje, se debe presionar la tecla escape.
Luego se debe presionar las teclas ":wq".
Si no se desean guardar los cambios, sólo se debe presionar ":q" (se cierra el editor de texto y el commit se cancelará)

documentar todo lo que haga para un futuro

Si se guardan los cambios del mensaje, se cerrará el editor de texto y luego del commit,
Git mostrará un resumen informando los cambios en esta confirmación,
mostrando: el mensaje resumen del commit, cuantas inserciones, eliminaciones y modificaciones hubo.

Si se intenta hacer commit sin haber cambios agregados al "Stagin Area",
Git informará del error y no registrará la confirmación

si quiero escribir con espacio debo agregar comillas shift + num2



                               

                           Clase2 GIT




                       Confirmacion Resumida

git commit -m "se agrega el archvio algoritmo.txt" ---permite crear en la confirmacion y el mensaje lo deja corto

git commit -a -m "agregar nueva linea al algoritmo" ---prepara y confirma (hay que dejar mensaje)

git checkout -- "nombre del archivo" ---deshacer el cambio (no se pueden recuperar)

git reset HEAD "nombre del archivo"---deshacer el cambio que este en el Stating Area

modificar ultima modificacion

Git school + Github: abrir

https://git-school.github.io/visualizing-git/

git commit --amend -m "nombre del archvivo" ---la ultima confirmacion va ser sustituida por la nueva
                                               (se puede cambiar el mensaje), sirve para sustituir commit sin necesidad de crear otro

git restore --staged "nombre del archivo" deshacer cambios, mandar otra vez a Working Area

                        DIFERENCIAS

git diff -- que cambios hay con respecto a un archivo que ya este preparado o confirmado
git diff --staged ---muestra las diferencias que hay entre lo que esta confirmado pero que esta en el stage

                     Historial de Confirmaciones

Entre los datos que se muestran al ejecutar git log estan:
-el identificador unico de la confirmacion
-el autor de la confirmacion (nombre y correo)
-la fecha de la confirmacion
-el mensaje resumen de la confirmacion

                   Historial Grafico

Observar el arbol de confirmaciones, ver las diferencias etc etc

cambio para verlo en el diff

presionar letra Q para salir

gitk --- ver el historial grafico
git log -n 4 --- ver las ultimas 4 confirmaciones del repositorio
git log -4 --- ver solamente los ultimos 4 commit


                          MANIPULANDO ARCHIVOS

git mv "nombre del archivo" "nuevo nombre del archivo" ---cambiar nombre
git rm --- borrar definitivamente el archivo del repositorio
git mv "nombre del archivo" carpet/"nombre del archivo"

                         VIAJANDO EN EL TIEMPO

Cada confirmación tiene un identificador único.
Cada confirmación es parte de un árbol.
Todas las confirmaciones estan enlazadas entre sí, de forma tal que se puede navegar de una a otra.
Hay un elemento que permite apuntar la confirmación actual. A este elemento se le denomina "HEAD"

En algun momento se puede hacer que el HEAD se ubique en otra confirmación, de forma tal que se puede visualizar
el estado del repositorio en esa confirmación. Esto se logra con el comando “git checkout”.
La forma general de usarlo es la siguiente: git checkout Donde el parámetro "códigoCommit"
indica el código del commit al que se desea viajar. Para determinar a cuál confirmación se desea mover,
debe averiguar primero el código de la confirmación, utilizando el comando "git log".

git checkout master --- Cuando se desea regresar nuevamente a la última confirmación

                    RESET

Los viajes en el tiempo que se han hecho hasta ahora no han realizado cambios ni eliminado ninguna de las confirmaciones
anteriores. ¿Qué tal que lo que se desea es retroceder en el tiempo pero a su vez eliminar todas las confirmaciones
hasta el punto hasta el cual retrocede?. Esto con el objetivo de no dejar rastros de esas confirmaciones y que
no aparezcan en el historial.

Git provee un comando que permite hacer lo anteriormente descrito, es decir, retroceder a algún commit pero con
git reset "nombre de la confirmacion"--- eliminando los commit anteriores.
El comando reset puede ser usado en alguno de estos modos:

Soft: No toca el archivo de índice o el árbol de trabajo en absoluto (pero restablece el encabezado a ,
al igual que todos los modos). Esto deja todos los archivos modificados "Cambios que se comprometerán",
como lo indicaría el estado de git.

Mixed: Restablece el índice pero no el árbol de trabajo (es decir, los archivos modificados se conservan
pero no se marcan para la confirmación) e informa lo que no se ha actualizado. Esta es la acción por defecto.

Hard: Restablece el índice y el árbol de trabajo. Cualquier cambio en los archivos rastreados en el árbol de
trabajo desde se descarta

git reset "nombre de la confirmacion" --soft


                                  CLASE 3

DEFINICION:

La característica de Git que realmente hace que sea distinto de casi todos los otros
SCV es su modelo de ramificación. Git permite tener múltiples ramas locales que
pueden ser totalmente independientes entre sí, lo que permite crear una línea de
tiempo de las versiones de los archivos. El sistema de ramificación permite la
creación de diversas líneas de tiempo separadas e identificadas bajo un nombre,
que en cualquier momento pueden ser integradas entre sí.

Esto facilita en gran medida el trabajo en equipo, ya que se pueden crear líneas de
tiempo del proyecto para cada tarea o cada uno de los involucrados en el desarrollo,
donde dichos cambios luego puedan ser integrados a una versión central del proyecto.

En el día a día del trabajo con Git una de las cosas más útiles que se puede hacer es
trabajar con ramas. Las ramas son caminos que puede tomar el desarrollo de un software,
algo que ocurre naturalmente para resolver problemas o crear nuevas funcionalidades.

En la práctica permiten que nuestro proyecto pueda tener diversos estados y que los
desarrolladores sean capaces de pasar de uno a otro de una manera ágil.
Las ramas se pueden usar para muchas situaciones.
Por ejemplo, al trabajar en un proyecto donde se necesita implementar una nueva
funcionalidad en la que es posible que se tenga que invertir varios días,
mediante el uso de ramas se puede crear prácticamente un proyecto paralelo
al proyecto central sin necesidad de alterar el código de este último,
donde luego si es necesario, se pueden agregar esos nuevos cambios al proyecto.


CREANDO RAMAS:

git branch --- reconocer que ramas tenemos, marcar con un * la rama donde estamos
git branch "nuevarama" --- crear una nueva rama, se debe usar el comando anterior agregándole el nombre de la nueva rama como sigue
gitk --- se puede ver la rama
git checkout "nombre de la rama" nos movemos hacia esa rama

El comando checkout tiene la posibilidad de permitir crear una rama nueva y
mover el HEAD a ella en un único paso.

git checkout -b "otrarama" --- Para crear una nueva rama y situar sobre ella


ELIMINANDO RAMAS:

Las ramas en un repositorio son temporales, una vez utilizada y cumplida su función por lo general las ramas son eliminadas para mantener un orden
dentro del repositorio.

Eliminar una rama simplemente sería quitar la línea de tiempo paralela creada,
no afectará en lo absoluto a las demás ramas.

git branch -d "nombre de la rama" ---eliminar rama

Si la rama tiene cambios sin fusionar dará un error como el siguiente:
error: The branch desarrollo is not an ancestor of your current HEAD.
If you are sure you want to delete it, run git branch -D desarrollo.

UNION DE RAMAS:

git merge "ramaAfucionar" ---fucionar rama, la fucion se va a realizar
con la rama en la cual se está posicionado actualmente.

En la fusión de ramas generalmente ocurre uno de los siguientes casos

Fast-Forward: No existen conflictos de cambios similares entre las ramas.
Manual Merge: Existen confictos en cambios hechos en ambas ramas
sobre los mismos archivos.
El Fast-Forward ocurre cuando la rama que se desea fusionar es hija
de la rama actual, la cual no ha sufrido cambios.
En este caso simplemente se fusionan las ramas,
se agregan los nuevos commit a la rama actual y se posiciona
el HEAD en el último nuevo commit. Es decir,
la rama actual queda ahora con los mismos commit que la rama
que se fusionó.

RESOLVIENDO CONFLICTOS:

El segundo caso que puede ocurrir al hacer una fusión entre ramas,
es que exista confirmaciones de cambios en ambas ramas que hayan
afectado a las mismas líneas de uno o más archivos.

En este caso Git muestra la advertencia y las líneas en las cuales
existen conflictos, así que se debe proceder manualmente a solventar
el problema para luego hacer un nuevo commit.

Ejemplo: en la rama master y en la rama desarrollo se modificó la
primera línea del archivo README.txt.


                               GITHUB

El trabajo en equipo es fundamental para lograr los objetivos de algún proyecto
de manera efectiva, además, que cada vez es más común encontrar equipos de trabajo
donde existe una separación física de sus integrantes, lo que se convierte en un
reto para las nuevas organizaciones.

Es por ello que se ha pensado en el desarrollo de ciertas plataformas que apoyen la
integración del trabajo en equipo, facilitando a sus miembros la realización de sus
actividades.

GitHub es una plataforma de desarrollo colaborativo para alojar proyectos utilizando
el sistema de control de versiones Git.

Se utiliza principalmente para la creación de código fuente de programas de
computadoras. El software que opera GitHub fue escrito en Ruby on Rails.

Desde enero de 2010, GitHub opera bajo el nombre de GitHub, Inc.
Anteriormente era conocida como Logical Awesome LLC.
El código de los proyectos alojados en GitHub se almacena típicamente de
forma pública, aunque utilizando una cuenta de pago,
también permite hospedar repositorios privados.

Allí se debe colocar el nombre del repositorio, una breve descripción,
tipo de repositorio (público o privado). El archivo README es importante,
por lo cual se debe habilitar la opción para crear con el proyecto un archivo README,
el cual servirá para especificar información del repositorio:

Owner: Dueño del proyecto.
ProjectName: Nombre del proyecto.
Description: Descripcion básica del repositorio.
Public ó Private: Especifica la seguridad del repositorio.
Por defecto los repositorios en GitHub son públicos.

Para crear una GitHub Page de cualquier proyecto, se debe crear un nuevo proyecto o
utilizar uno ya existente, sabiendo que debe estar clonado localmente para poder
hacer las modificaciones respectivas.

Se debe crear una rama llamada gh-pages git branch gh-pages
Esta es la rama que debe albergar los archivos de la página.
Los cambios se deben subir a esta rama mediante el comando git push origin gh-pages.

Para acceder la página del repositorio, basta con colocar la url que siga la siguiente estructura:
nombreUsuario.github.io/nombreRepositorio Donde “nombreUsuario”
es el nombre de usuario registrado en GitHub y “nombreRepositorio”
es el nombre del repositorio en el cual hemos
subido los archivos a su rama gh-pages

git branch gh-pages: rama que debemos crear en el repositorio local
para luego subir dicha rama al repositorio remoto y eso pueda estar
disponible en la web, accediendo a traves de la
URL: nombreUsuario.github.io/nombreRepositorio

            REPOSITORIO REMOTO

Una de las grandes ventajas de Git es que es un sistema de control de versiones distribuidos,
es decir, que un repositorio puede estar localmente o remotamente. Por lo tanto,
debe haber una forma de compartir el trabajo realizado en un repositorio con otros
desarrolladores. Los repositorios remotos son versiones de un proyecto que se encuentran
alojados en un servidor accesible a través de la red.

Entre las ventajas de los repositorios remotos están:

Tener copias del trabajo en la web, lo que las hace accesibles en cualquier momento.

Redundancia de los archivos, lo que suopne un alto nivel de disponibilidad en caso de fallos.

Gestión de proyectos en equipo.

Control de actividades en el desarrollo.

Colaboración en proyectos de terceros en plataformas que usen Git como sistema de control
de versiones.

Crear portafolios de trabajos realizados por el usuario

               CLONANDO REPOSITORIOS

Es muy común tener la necesidad de obtener algún proyecto de un repositorio remoto que ya esté
adelantado, solo para agregarlo al ambiente local. Para obtener un repositorio remoto de
GitHub sin tener ningún repositorio local, el usuario debe colocarse en la carpeta donde
necesita que se cree el repositorio y usar el comando “clone” de git.

Para clonar un repositorio se necesita la URL del repositorio.
La estructura del comando clone es la siguiente:
Git clone "url"

El comando git clone realiza las siguientes acciones:

Crea una carpeta.
Crea un repositorio git en la carpeta.
Copia el contenido del repositorio remoto en la carpeta local.
Se agrega un repositorio remoto con el nombre "origin"
Los repositorios clonados tendrán la misma estructura y características del repositorio remoto,
eso incluye commits y ramas.

Git provee el comando “git remote -v” para verificar el o los repositorios remotos que
tiene asociado el repositorio local. En la imagen se muestra la salida de un repositorio
local el cual no está asociado a ningún repositorio remoto.

El repositorio remoto tiene asociado una URL dentro de la plataforma con
el siguiente patrón: https://github.com/vilferalvarez/Cadif1Project.git

Para establecer la conexión entre los 2 repositorios, se debe usar una variante del
comando remote como sigue: git remote add nombre url Donde “nombre” es el nombre para
identificar el repositorio remoto y la “url” para especificar la dirección exacta de
ese repositorio en la web.

El nombre del repositorio remoto es arbitrario. En cualquier momento se puede cambiar el
nombre con el comando "git remote rename". La forma general del comando es:
git remote rename [antiguo-nombre] [nuevo-nombre] Donde "antiguo-nombre" es el nombre original
y "nuevo-nombre" el nombre que se desea asignar.

También se puede eliminar la referencia a un repositorio remoto con el comando
"git remote rm". La forma general del comando es: git remote rm [nombre-remoto]
Donde "nombre-remto" es el nombre del repositorio remoto que se desea eliminar.

Por ejemplo: git remote rm origin Eliminará el repositorio remoto que tiene
el nombre "origin".


































